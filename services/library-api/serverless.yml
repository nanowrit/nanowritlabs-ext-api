service: nanowritlabs-ext-library-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific tables for the stage
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtClassicStoriesTableArn
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtModernStoriesTableArn
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtStorySeedsTableArn
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtAuthorsTableArn

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /beginnings
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  # Create functions for each table below this line:
  create-classicStory:
    handler: create-classicStory.main
    events:
      - http:
          path: classicstorys
          method: post
          cors: true
          authorizer: aws_iam

  create-modernStory:
    handler: create-modernStory.main
    events:
      - http:
          path: modernstorys
          method: post
          cors: true
          authorizer: aws_iam

  create-storySeed:
    handler: create-storySeed.main
    events:
      - http:
          path: storyseeds
          method: post
          cors: true
          authorizer: aws_iam

  create-author:
    handler: create-author.main
    events:
      - http:
          path: authors
          method: post
          cors: true

  # Get functions for each table below this line:
  get-classicStory:
    handler: get-classicStory.main
    events:
      - http:
          path: classicstorys/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-modernStory:
    handler: get-modernStory.main
    events:
      - http:
          path: modernstorys/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-storySeed:
    handler: get-storySeed.main
    events:
      - http:
          path: storyseeds/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-author:
    handler: get-author.main
    events:
      - http:
          path: authors/{id}
          method: get
          cors: true
          authorizer: aws_iam

  # List functions for each table below this line:
  list-classicStory:
    handler: list-classicStory.main
    events:
      - http:
          path: classicstorys
          method: get
          cors: true
          authorizer: aws_iam

  list-modernStory:
    handler: list-modernStory.main
    events:
      - http:
          path: modernstorys
          method: get
          cors: true
          authorizer: aws_iam

  list-storySeed:
    handler: list-storySeed.main
    events:
      - http:
          path: storyseeds
          method: get
          cors: true
          authorizer: aws_iam

  list-author:
    handler: list-author.main
    events:
      - http:
          path: authors
          method: get
          cors: true
          authorizer: aws_iam

  # Update functions for each table below this line:
  update-classicStory:
    handler: update-classicStory.main
    events:
      - http:
          path: classicstorys/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-modernStory:
    handler: update-modernStory.main
    events:
      - http:
          path: modernstorys/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-storySeed:
    handler: update-storySeed.main
    events:
      - http:
          path: storyseeds/{id}
          method: put
          cors: true
          authorizer: aws_iam

  update-author:
    handler: update-author.main
    events:
      - http:
          path: authors/{id}
          method: put
          cors: true
          authorizer: aws_iam

  # Delete functions for each table below this line:
  delete-classicStory:
    handler: delete-classicStory.main
    events:
      - http:
          path: classicstorys/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-modernStory:
    handler: delete-modernStory.main
    events:
      - http:
          path: modernstorys/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-storySeed:
    handler: delete-storySeed.main
    events:
      - http:
          path: storyseeds/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  delete-author:
    handler: delete-author.main
    events:
      - http:
          path: authors/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(../resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(../resources/cognito-policy.yml)}

# TODO delete the stuff below... maybe?
Outputs:
  ApiGatewayRestApiId:
    Value:
      Ref: ApiGatewayRestApi
    Export:
      Name: ${self:custom.stage}-ExtLibraryApiId

  ApiGatewayRestApiRootResourceId:
    Value:
       Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId 
    Export:
      Name: ${self:custom.stage}-ExtLibraryApiRootResourceId
