# These elements are character, situation, objective, opponent, disaster, and theme.
# A dramatic statement and a dramatic question

service: nanowritlabs-ext-premisebuilder-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific tables for the stage
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtPremisesTableArn

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /beginnings
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  # Create functions for each table below this line:
  create-premise:
    handler: create-premise.main
    events:
      - http:
          path: premises
          method: post
          cors: true
          authorizer: aws_iam

  # Get functions for each table below this line:
  get-premise:
    handler: get-premise.main
    events:
      - http:
          path: premises/{id}
          method: get
          cors: true
          authorizer: aws_iam

  # List functions for each table below this line:
  list-premise:
    handler: list-premise.main
    events:
      - http:
          path: premises
          method: get
          cors: true
          authorizer: aws_iam

  # Update functions for each table below this line:
  update-premise:
    handler: update-premise.main
    events:
      - http:
          path: premises/{id}
          method: put
          cors: true
          authorizer: aws_iam

  # Delete functions for each table below this line:
  delete-premise:
    handler: delete-premise.main
    events:
      - http:
          path: premise/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(../resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(../resources/cognito-policy.yml)}

# TODO delete the stuff below... maybe?
Outputs:
  ApiGatewayRestApiId:
    Value:
      Ref: ApiGatewayRestApi
    Export:
      Name: ${self:custom.stage}-ExtPremiseBuilderApiId

  ApiGatewayRestApiRootResourceId:
    Value:
       Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId 
    Export:
      Name: ${self:custom.stage}-ExtPremiseBuilderApiRootResourceId
